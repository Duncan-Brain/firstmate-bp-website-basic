{
  "root": true,
  "extends": ["plugin:jsdoc/recommended", "airbnb", "plugin:@next/next/recommended", "plugin:@next/next/core-web-vitals"],
  "plugins": ["react", "jsdoc", "@next/next", "testing-library", "jest"],
  "env": {
    "browser": true,
    "node": true
  },
  "settings": {
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
                                         // default to "createReactClass"
      "pragma": "React",  // Pragma to use, default to "React"
      "fragment": "Fragment",  // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
                           // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
                           // default to latest and warns if missing
                           // It will default to "detect" in the future
      "flowVersion": "0.53" // Flow version
    },
    "propWrapperFunctions": [
        // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
        "forbidExtraProps",
        {"property": "freeze", "object": "Object"},
        {"property": "myFavoriteWrapper"},
        // for rules that check exact prop wrappers
        {"property": "forbidExtraProps", "exact": true}
    ],
    "componentWrapperFunctions": [
        // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
        "observer", // `property`
        {"property": "styled"}, // `object` is optional
        {"property": "observer", "object": "Mobx"},
        {"property": "observer", "object": "<pragma>"} // sets `object` to whatever value `settings.react.pragma` is set to
    ],
    "formComponents": [
      // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
      "CustomForm",
      {"name": "Form", "formAttribute": "endpoint"}
    ],
    "linkComponents": [
      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
      "Hyperlink",
      {"name": "Link", "linkAttribute": "to"}
    ]
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "overrides": [
    {
      "files": [
        "**/__tests__/**/*.[jt]s?(x)",
        "**/?(*.)+(spec|test).[jt]s?(x)"
      ],
      "extends": ["plugin:testing-library/react", "plugin:jest/recommended"],
      "env": {
        "jest/globals": true
      }
    },
    {
      "files": [
        "**/__mocks__/**/*.[jt]s?(x)"
      ],
      "extends": ["plugin:testing-library/react", "plugin:jest/recommended"],
      "env": {
        "jest/globals": true
      },
      "rules":{
        "jsx-a11y/alt-text": "off",
        "react/jsx-props-no-spreading": "off",
        "react/prop-types": "off",
        "@next/next/no-img-element": "off"
      }
    },
    {
      "files": [
        "_app.jsx", "_document.jsx"
      ],
      "rules":{
        "react/prop-types": "off"
      }
    }
  ],
  "rules": {
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "object-curly-newline": ["error", {
        "ObjectExpression": "always",
        "ObjectPattern": { "multiline": true },
        "ImportDeclaration": "never",
        "ExportDeclaration": { "multiline": true }
    }],
    "react/function-component-definition": ["error", {
      "namedComponents": "function-declaration",
      "unnamedComponents": "arrow-function"
    }],
    "react/jsx-props-no-spreading": ["error", {
      "exceptions": ["Component"]
    }],
    "max-len": ["error", {
      "ignoreStrings": true,
      "ignoreUrls": true,
      "ignoreComments": true
    }],
    "jsx-a11y/alt-text": [
      "warn",
      {
        "elements": ["img"],
        "img": ["Image"]
      }
    ]
  }
}
